## print in golang

Step-1.1: Create a file with .go extension
        main.go

Step-1.2: package main

Step-1.3: Import fmt package like below
          import "fmt"

Step-2.1: Use Println() function to print the output
        A) fmt.Println("Hello World")
        B) fmt.Println("Hello", "World")
        C) fmt.Println("Hello", "World", 1, 2, 3)
        D) fmt.Println("Hello", "World", 1, 2, 3, true, false)
        E) fmt.Println("Hello", "World", 1, 2, 3, true, false, 1.2, 2.3, 3.4)

Step-2.2: Use Printf() function to print the output
        A) fmt.Printf("Hello World")
        B) fmt.Printf("Hello %s", "World")
        C) fmt.Printf("Hello %s %d %d %d", "World", 1, 2, 3)
        D) fmt.Printf("Hello %s %d %d %d %t %t", "World", 1, 2, 3, true, false)
        E) fmt.Printf("Hello %s %d %d %d %t %t %f %f %f", "World", 1, 2, 3, true, false, 1.2, 2.3, 3.4)

Step-2.3: Use Sprintf() function to print the output
        A) fmt.Sprintf("Hello World")
        B) fmt.Sprintf("Hello %s", "World")
        C) fmt.Sprintf("Hello %s %d %d %d", "World", 1, 2, 3)
        D) fmt.Sprintf("Hello %s %d %d %d %t %t", "World", 1, 2, 3, true, false)
        E) fmt.Sprintf("Hello %s %d %d %d %t %t %f %f %f", "World", 1, 2, 3, true, false, 1.2, 2.3, 3.4)

Step-3: Run the program
        go run main.go

## how to check the type of variable
    fmt.Printf("%T", variable_name)  // %T is used to print the type of variable


## variables in golang

# creating string variables and assigning values
    var variable_name string       // default value is ""
    variable_name = "Hello World"  // assign value to variable

    # also we can create and assign value in single line
    variable_name := "Hello World"  


# creating int variables and assigning values
    var variable_name int         // default value is 0
    variable_name = 10            // assign value to variable

    # also we can create and assign value in single line
    variable_name := 10


# creating float variables and assigning values
    var variable_name float64     // default value is 0
    variable_name = 10.5          // assign value to variable

    # also we can create and assign value in single line
    variable_name := 10.5


# how to create multiple variables in single line
    var (
        variable_name1 string
        variable_name2 int
        variable_name3 float64
    )

    # also we can create and assign value in single line
    variable_name1, variable_name2, variable_name3 := "Hello World", 10, 10.5


# how to create multiple variables in single line with same type
    var (
        variable_name1, variable_name2, variable_name3 string
    )

    # also we can create and assign value in single line
    variable_name1, variable_name2, variable_name3 := "Hello World", "Hello World", "Hello World"


# Now take input from user

    var variable_name string
    fmt.Scanln(&variable_name)  // & is used to get the address of variable

    # we cannot use variable_name directly in Scanln() function because it is not a pointer variable, 
      to make it a pointer variable we have to use & before variable_name

    # also we can create and assign value in single line

        variable_name := "Hello World"
        fmt.Scanln(&variable_name)  // & is used to get the address of variable

    # we cannot use Scanln() function to take input for int and float
    # we have to use Scan() function to take input for int and float

        var variable_name int
        fmt.Scan(&variable_name)  // here using Scan() function to take input for int variable


## constants in golang

    # creating string constants and assigning values
        const constant_name string = "Hello World"


## arrays and slices in golang

    # creating array
        var array_name [size]type

    # creating array and assigning values
        var array_name [size]type = [size]type{value1, value2, value3, value4, value5}

    # creating array and assigning values in single line
        array_name := [size]type{value1, value2, value3, value4, value5}

    # creating array and assigning values in single line with default size
        array_name := [...]type{value1, value2, value3, value4, value5}


    # creating slice
        var slice_name []type

    # creating slice and assigning values
        var slice_name []type = []type{value1, value2, value3, value4, value5}

    # creating slice and assigning values in single line
        slice_name := []type{value1, value2, value3, value4, value5}


    # creating slice from array
        array_name := [size]type{value1, value2, value3, value4, value5}
        slice_name := array_name[:]
        slice_name := array_name[0:2]

         


